// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
	userKey Int @id @default(autoincrement()) @map("user_key")

	id String @map("id")
	pw String @map("pw")
	nickname String @map("nickname") 
	squadMem1 Int @default(0) @map("squad_mem_1")
	squadMem2 Int @default(0) @map("squad_mem_2")
	squadMem3 Int @default(0) @map("squad_mem_3")
	favoriteAgent Int @default(0) @map("favorite_agent")
  createdAt DateTime @default(now()) @map("created_at")

	asset Assets?
	rank Ranks?
  myAgent MyAgents[]
	@@map("Users")
}

model Assets {
	assetKey Int @id @default(autoincrement()) @map("asset_key")
	userKey Int @unique @map("user_key")

	cash Int @default(100000) @map("cash")
	mileage Int @default(0) @map("mileage")
	enhancer Int @default(10) @map("enhancer")

	user Users @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
	@@map("Assets")
}

model Ranks {
	rankKey Int @id @default(autoincrement()) @map("rank_key")
	userKey Int @unique @map("user_key")

	winCount Int @default(0) @map("win_count")
	loseCount Int @default(0) @map("lose_count")
	drawCount Int @default(0) @map("draw_count")
	mmr Int @default(5000) @map("mmr")
	updatedAt DateTime @updatedAt @map("updated_at")

	user Users @relation(fields: [userKey], references: [userKey], onDelete: Cascade)
	@@map("Ranks")
}

model Agents {
	agentKey Int @id @default(autoincrement()) @map("agent_key")

	name String @map("name")
	team String @map("team")
	position Pos @map("position")
	grade Grade @map("grade")

	stat Stats?
  myAgent MyAgents[]
	@@map("Agents")
}

enum Pos {
	tanker
	warrior
	wizard
}

enum Grade {
	s
	a
}

model Stats {
	statKey Int @id @default(autoincrement()) @map("stat_key")
	agentKey Int @unique @map("agent_key")

	ad Int @default(100) @map("ad")
	ap Int @default(100) @map("ap")
	hp Int @default(100) @map("hp")
	mp Int @default(100) @map("mp")
	def Int @default(100) @map("def")
	crit Int @default(100) @map("crit")

	agent Agents @relation(fields: [agentKey], references: [agentKey], onDelete: Cascade)
	@@map("Stats")
}

model MyAgents {
	myAgentKey Int @id @default(autoincrement()) @map("my_agent_key")
	userKey Int @map("user_key")
	agentKey Int @map("agent_key")
  
	level Int @default(1) @map("level")
	rank Int @default(0) @map("rank")
	count Int @default(1) @map("count")
	obtainedAt DateTime @updatedAt @map("obtained_at")

	user Users @relation(fields: [userKey],references: [userKey], onDelete: Cascade)
	agent Agents @relation(fields: [agentKey],references: [agentKey], onDelete: Cascade)
	@@map("MyAgents")
}
